import re
import urlparse
from datetime import datetime # TODO make this better, it sucks
from datetime import timedelta
from datetime import date

import requests
from django.http import HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.http import HttpResponsePermanentRedirect

from models import Url, Domain
from forms import ShortenForm, strip_to_domain


base_dict = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

def encode_62(url_id):
	"""This is the shortened url algorithm, this will take the given url object id, 
	   and return a 62 bit encoded one.

	   Keyword arguement:
	   id - autogenerated_id for url object (pk)
	"""
	url_id = url_id + 5000
	base = 62
	if (url_id==0):
		return base_dict[0]
	code = []
	while url_id > 0:
		remainder = url_id % base
		url_id = url_id / base
		code.append(base_dict[remainder])
	code.reverse()
	print code
	return ''.join(code)


def decode_62(code):
	"""
	Given a encoded url, I will decode the code and look up the address with the returned
	pk value.

	Keyword argument
	code - shortened url string
	"""
	base = 62
	code_len = len(code)
	decr, num  = (0, 0)
	for char in code:
		exponent = (code_len - (decr +1 ))
		num += base_dict.index(char) * (base ** exponent)
		decr += 1
	num = num - 5000
	return num
	 


def make_url_model(url, site): 
	""" This should on occur once per newly created URL, the linked count is set to zero if it
		is a new site added to database
	"""
	now = datetime.now()
	base_url = 'http://links.ep.io/'
	url_model = Url()
	url_model.url = url
	url_short  = url
	try: 
		domain = Domain.objects.get(site=site)
		domain.linked_count += 1
		domain.date_updated = now
		domain.save()
	except:
		domain = Domain(site=site, linked_count=1, date_updated= now)
		domain.save()
	url_model.site = domain
	url_model.date_time_created = datetime.now()
	url_model.linked_count = 1
	url_model.save()
	url_model.url_shortened = base_url + encode_62(url_model.pk)
	print url_model.url_shortened
	url_model.save()
	return url_model




def homepage(request):
	""" This view is responsible for displaying the landing page
		with the shortening form.

		This page has three flows:
		first -- post method for accepting the url to be shortened
		second -- if not post show form
		third -- error in submitted form

	Keyword arguments:

	"""
	if request.method == 'POST':
		form = ShortenForm(request.POST)
		
		if form.is_valid():
			#print form.cleaned_data
			url = form.cleaned_data['url']
			url_shortened = form.cleaned_data['url']
			site = strip_to_domain(url)
			result = make_url_model(url, site)
			request.session['url_short'] = result.url_shortened
			return HttpResponseRedirect('/thanks/')

	else:
		form = ShortenForm()
	return render (request, 'index.html',  {'form':form})


def thanks(request):
	"""This view returns the shortened url back to the client.
	"""
	url_short = request.session['url_short']
	return render(request, 'thanks.html', {'url_short': url_short})

def subtract_one_month(current_date):
	"""This method returns date format for the previous month, this is achieved by setting, 
	date to the first day of current month and going back one day, and therefore entering, 
	previous month.

	Keyword arguments

	"""
	current_date_day_one = current_date.replace(day=1)
	previous_month = current_date_day_one - timedelta(days=1)
	return previous_month


def list_last_hundred(request):
	""" This method returns the last 100 submitted urls
	"""
	url_list = Url.objects.all().order_by('-date_time_created')[:100]
	return render(request, 'last_hundred.html', {'url_list': url_list})


def list_top_domain_monthly(request):
	""" Returns the list most popular domains, by the amount being linked to. 
	"""
	time = date.today()
	month_ago = subtract_one_month(time)
	month =  month_ago.month
	domain_list = Domain.objects.filter(date_updated__month=month).order_by('-linked_count')
	return render(request, 'topdomainmonthly.html', {'domain_list': domain_list})


def redirect_link(request, code):
	"""This view is reponsible for decoding the hashcode and redirect to url page.

	Keyword arguments:
	hashcode -- shortcut used to look up corresponding url page

	"""
	# print code
	pk_id=decode_62(code)
	url_model = get_object_or_404(Url, pk=pk_id)
	url = url_model.url
	return HttpResponsePermanentRedirect(url)